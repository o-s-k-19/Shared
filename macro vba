Option Explicit
Option Compare Text  ' Insensible à la casse

'====================================================
' UDF MultiLookup : recherche multi-critères et multi-retours
' - TableRange : plage (entête + données)
' - CriteriaHeaders : plage 1×N des noms de colonnes (Range absolu) OU chaîne comma-separated fixe
' - CriteriaValues : plage 1×N des valeurs (Range absolu)
' - ReturnColumns : plage 1×M des noms de colonnes à retourner OU chaîne comma-separated
'
Public Function MultiLookup(
    TableRange As Range,
    CriteriaHeaders As Variant,
    CriteriaValues As Range,
    ReturnColumns As Variant
) As Variant
    Dim ws As Worksheet: Set ws = TableRange.Worksheet
    Dim hdrRow As Long: hdrRow = TableRange.Row
    Dim lastRow As Long: lastRow = hdrRow + TableRange.Rows.Count - 1
    Dim lastCol As Long: lastCol = TableRange.Column + TableRange.Columns.Count - 1
    Dim headerMap As Object: Set headerMap = CreateObject("Scripting.Dictionary")
    Dim critCount As Long, retCount As Long
    Dim critNames() As String, critValues() As String, retNames() As String
    Dim j As Long, rw As Long, foundCount As Long, foundRow As Long
    Dim callCell As Range
    Dim arr As Variant

    '--- Valider TableRange
    If TableRange Is Nothing Then
        MultiLookup = CVErr(xlErrRef): Exit Function
    End If

    '--- Résoudre CriteriaHeaders (Range ou texte)
    If TypeName(CriteriaHeaders) = "Range" Then
        critCount = CriteriaHeaders.Columns.Count
        ReDim critNames(1 To critCount)
        For j = 1 To critCount
            critNames(j) = Trim(CStr(CriteriaHeaders.Cells(1, j).Value))
        Next j
    Else
        arr = Split(CStr(CriteriaHeaders), ",")
        critCount = UBound(arr) - LBound(arr) + 1
        ReDim critNames(1 To critCount)
        For j = LBound(arr) To UBound(arr)
            critNames(j - LBound(arr) + 1) = Trim(arr(j))
        Next j
    End If

    '--- Valider CriteriaValues
    If CriteriaValues Is Nothing Or CriteriaValues.Columns.Count <> critCount Then
        MultiLookup = CVErr(xlErrRef): Exit Function
    End If
    ReDim critValues(1 To critCount)
    For j = 1 To critCount
        critValues(j) = Trim(CStr(CriteriaValues.Cells(1, j).Value))
    Next j

    '--- Résoudre ReturnColumns
    If TypeName(ReturnColumns) = "Range" Then
        retCount = ReturnColumns.Cells.Count
        ReDim retNames(1 To retCount)
        For j = 1 To retCount
            retNames(j) = Trim(CStr(ReturnColumns.Cells(1, j).Value))
        Next j
    Else
        arr = Split(CStr(ReturnColumns), ",")
        retCount = UBound(arr) - LBound(arr) + 1
        ReDim retNames(1 To retCount)
        For j = LBound(arr) To UBound(arr)
            retNames(j - LBound(arr) + 1) = Trim(arr(j))
        Next j
    End If

    '--- Vérifier zone libre pour spill horizontal
    On Error Resume Next: Set callCell = Application.Caller: On Error GoTo 0
    If Not callCell Is Nothing Then
        For j = 1 To retCount - 1
            With ws.Cells(callCell.Row, callCell.Column + j)
                If .HasFormula Or Not IsEmpty(.Value2) Then
                    MultiLookup = CVErr(xlErrRef): Exit Function
                End If
            End With
        Next j
    End If

    '--- Construire mapping entête -> colonne
    For j = TableRange.Column To lastCol
        headerMap(Trim(ws.Cells(hdrRow, j).Value)) = j
    Next j
    ' Valider retNames
    For j = 1 To retCount
        If Not headerMap.Exists(retNames(j)) Then
            MultiLookup = CVErr(xlErrNA): Exit Function
        End If
    Next j

    '--- Recherche unique
    For rw = hdrRow + 1 To lastRow
        Dim matchOK As Boolean: matchOK = True
        For j = 1 To critCount
            If Not headerMap.Exists(critNames(j)) Or _
               Trim(CStr(ws.Cells(rw, headerMap(critNames(j))).Value)) <> critValues(j) Then
                matchOK = False: Exit For
            End If
        Next j
        If matchOK Then
            foundCount = foundCount + 1
            foundRow = rw
            If foundCount > 1 Then
                MultiLookup = CVErr(xlErrValue): Exit Function
            End If
        End If
    Next rw

    '--- Retourner résultats
    If foundCount = 1 Then
        Dim valArr: ReDim valArr(1 To 1, 1 To retCount)
        For j = 1 To retCount
            valArr(1, j) = ws.Cells(foundRow, headerMap(retNames(j))).Value
        Next j
        MultiLookup = valArr
    Else
        MultiLookup = CVErr(xlErrNA)
    End If
End Function

'----------------------------------------------------
' Auto-open : enregistrer l'aide et la description
Private Sub Workbook_Open()
    Application.MacroOptions _
        Macro:="MultiLookup", _
        Description:="Recherche multi-critères et retourne 1…N colonnes.", _
        Category:="MultiLookup", _
        ArgumentDescriptions:=Array( _
            "TableRange : plage de la table (Range)", _
            "CriteriaHeaders : en-têtes des colonnes (Range ou texte comma-separated)", _
            "CriteriaValues : valeurs de critères (Range absolu)", _
            "ReturnColumns : colonnes à retourner (Range ou texte comma-separated)" _
        )
End Sub
'====================================================