Function ExtraireCodeSetAvancé(codeSetName As String, tableRange As Range, _
                                colonnesConcat As String, Optional separateur As String = " : ") As String
    Dim i As Long, idx As Long
    Dim result As String
    Dim lignes As Collection
    Dim colonnes() As String
    Dim ligneTexte As String

    Set lignes = New Collection
    colonnes = Split(colonnesConcat, ",")

    For i = 1 To tableRange.Rows.Count
        If tableRange.Cells(i, 1).Value = codeSetName Then
            ligneTexte = ""
            For idx = 0 To UBound(colonnes)
                ligneTexte = ligneTexte & tableRange.Cells(i, CInt(colonnes(idx))).Value
                If idx < UBound(colonnes) Then
                    ligneTexte = ligneTexte & separateur
                End If
            Next idx
            lignes.Add ligneTexte
        End If
    Next i

    For idx = 1 To lignes.Count
        result = result & lignes(idx)
        If idx < lignes.Count Then result = result & Chr(10)
    Next idx

    ExtraireCodeSetAvancé = result
End Function
' pour vérifier si un mot se termine par un autre mot
=SI(DROITE(A2;NBCAR(B2))=B2; "Oui"; "Non")




' Module : OptimisationMacros

Dim ancienModeCalcul As XlCalculation

Sub DebutMacro()
    On Error Resume Next
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    ancienModeCalcul = Application.Calculation
    Application.Calculation = xlCalculationManual
    On Error GoTo 0
End Sub

Sub FinMacro(Optional forceRecalcul As Boolean = False)
    On Error Resume Next
    If forceRecalcul Then
        Application.CalculateFull
    End If
    Application.Calculation = ancienModeCalcul
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    On Error GoTo 0
End Sub


