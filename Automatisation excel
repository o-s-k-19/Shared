Option Explicit

' Macro pour vérifier 4 champs entre deux fichiers avec synthèse stylée et insensible à la casse et aux espaces
Public Sub VerifierChamps()
    Dim cfgWS       As Worksheet
    Dim srcWB       As Workbook, srcWS As Worksheet
    Dim tgtWB       As Workbook, tgtWS As Worksheet
    Dim dict        As Object
    Dim key         As String
    Dim i As Long, j As Long
    
    Const configSheetName As String = "programme"
    ' Config source
    Dim sourcePath  As String, sourceSheet As String
    Dim srcStartRow As Long, srcEndRow As Long, srcCols(1 To 4) As String
    ' Config cible
    Dim targetPath  As String, targetSheet As String
    Dim tgtStartRow As Long, tgtEndRow As Long, tgtCols(1 To 4) As String
    Dim resultCol   As String
    
    ' --- Charger la configuration
    Set cfgWS = GetSheetByNameInsensitive(ThisWorkbook, configSheetName)
    If cfgWS Is Nothing Then
        MsgBox "Feuille '" & configSheetName & "' introuvable.", vbCritical
        Exit Sub
    End If
    With cfgWS
        sourcePath   = Trim(.Range("B3").Value)
        sourceSheet  = Trim(.Range("B4").Value)
        srcStartRow  = CLng(.Range("B5").Value)
        srcEndRow    = CLng(.Range("B6").Value)
        srcCols(1)   = Trim(.Range("B7").Value)
        srcCols(2)   = Trim(.Range("B8").Value)
        srcCols(3)   = Trim(.Range("B9").Value)
        srcCols(4)   = Trim(.Range("B10").Value)
        targetPath   = Trim(.Range("B11").Value)
        targetSheet  = Trim(.Range("B12").Value)
        tgtStartRow  = CLng(.Range("B13").Value)
        tgtEndRow    = CLng(.Range("B14").Value)
        tgtCols(1)   = Trim(.Range("B15").Value)
        tgtCols(2)   = Trim(.Range("B16").Value)
        tgtCols(3)   = Trim(.Range("B17").Value)
        tgtCols(4)   = Trim(.Range("B18").Value)
        resultCol    = Trim(.Range("B19").Value)
    End With
    ' Validation
    If sourcePath = "" Or sourceSheet = "" Or srcStartRow < 1 Or srcEndRow < srcStartRow Then
        MsgBox "Paramètres source invalides (B3:B6).", vbCritical
        Exit Sub
    End If
    If targetPath = "" Or targetSheet = "" Or tgtStartRow < 1 Or tgtEndRow < tgtStartRow Or resultCol = "" Then
        MsgBox "Paramètres cible invalides (B11:B14, B19).", vbCritical
        Exit Sub
    End If
    
    ' --- Charger source et construire le dictionnaire (insensible casse & espaces)
    Set dict = CreateObject("Scripting.Dictionary")
    On Error Resume Next: Set srcWB = Workbooks.Open(sourcePath, ReadOnly:=True): On Error GoTo 0
    If srcWB Is Nothing Then MsgBox "Impossible d'ouvrir source: " & sourcePath, vbCritical: Exit Sub
    Set srcWS = GetSheetByNameInsensitive(srcWB, sourceSheet)
    If srcWS Is Nothing Then
        MsgBox "Feuille source '" & sourceSheet & "' introuvable.", vbCritical
        srcWB.Close False: Exit Sub
    End If
    For i = srcStartRow To srcEndRow
        key = ""
        For j = 1 To 4
            key = key & "|" & UCase(Trim(CStr(srcWS.Cells(i, ColumnLetterToNumber(srcCols(j))).Value)))
        Next j
        dict(key) = False
    Next i
    ' Garde srcWB ouvert pour synthèse
    
    ' --- Ouvrir et vérifier la cible
    On Error Resume Next: Set tgtWB = Workbooks.Open(targetPath): On Error GoTo 0
    If tgtWB Is Nothing Then MsgBox "Impossible d'ouvrir cible: " & targetPath, vbCritical: srcWB.Close False: Exit Sub
    Set tgtWS = GetSheetByNameInsensitive(tgtWB, targetSheet)
    If tgtWS Is Nothing Then
        MsgBox "Feuille cible '" & targetSheet & "' introuvable.", vbCritical
        tgtWB.Close False: srcWB.Close False: Exit Sub
    End If
    ' Ecrire en-tête résultat si absent
    If tgtWS.Cells(tgtStartRow - 1, ColumnLetterToNumber(resultCol)).Value = "" Then
        tgtWS.Cells(tgtStartRow - 1, ColumnLetterToNumber(resultCol)).Value = "Result"
    End If
    For i = tgtStartRow To tgtEndRow
        key = ""
        For j = 1 To 4
            key = key & "|" & UCase(Trim(CStr(tgtWS.Cells(i, ColumnLetterToNumber(tgtCols(j))).Value)))
        Next j
        If dict.Exists(key) Then
            dict(key) = True
            tgtWS.Cells(i, ColumnLetterToNumber(resultCol)).Value = "O"
        Else
            tgtWS.Cells(i, ColumnLetterToNumber(resultCol)).Value = "N"
        End If
    Next i
    tgtWB.Save: tgtWB.Close False
    
    ' --- Générer la synthèse stylée
    Dim synthWS As Worksheet
    On Error Resume Next: Set synthWS = GetSheetByNameInsensitive(ThisWorkbook, "synthese"): On Error GoTo 0
    If synthWS Is Nothing Then
        Set synthWS = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        synthWS.Name = "synthese"
    Else
        synthWS.Cells.Clear
    End If
    ' Copier en-tête du source
    Dim hdrRow As Long, lastColSrc As Long
    hdrRow = srcStartRow - 1
    lastColSrc = srcWS.Cells(hdrRow, srcWS.Columns.Count).End(xlToLeft).Column
    For j = 1 To lastColSrc
        synthWS.Cells(1, j).Value = srcWS.Cells(hdrRow, j).Value
    Next j
    ' Styliser en-tête
    With synthWS.Rows(1)
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 255)
    End With
    ' Lister lignes non trouvées
    Dim outR As Long: outR = 2
    Dim countFound As Long, countNotFound As Long
    For i = srcStartRow To srcEndRow
        key = ""
        For j = 1 To 4
            key = key & "|" & UCase(Trim(CStr(srcWS.Cells(i, ColumnLetterToNumber(srcCols(j))).Value)))
        Next j
        If dict(key) = False Then
            countNotFound = countNotFound + 1
            For j = 1 To lastColSrc: synthWS.Cells(outR, j).Value = srcWS.Cells(i, j).Value: Next j
            outR = outR + 1
        Else
            countFound = countFound + 1
        End If
    Next i
    ' Statistiques
    Dim totalSrc As Long: totalSrc = srcEndRow - srcStartRow + 1
    Dim totalTgt As Long: totalTgt = tgtEndRow - tgtStartRow + 1
    Dim pctF As Double, pctN As Double
    If totalSrc > 0 Then pctF = countFound / totalSrc: pctN = countNotFound / totalSrc
    Dim statR As Long: statR = outR + 1
    synthWS.Cells(statR, 1).Value = "Total source": synthWS.Cells(statR, 2).Value = totalSrc
    synthWS.Cells(statR + 1, 1).Value = "Lignes trouvées": synthWS.Cells(statR + 1, 2).Value = countFound: synthWS.Cells(statR + 1, 3).Value = Format(pctF, "0.00%")
    synthWS.Cells(statR + 2, 1).Value = "Lignes non trouvées": synthWS.Cells(statR + 2, 2).Value = countNotFound: synthWS.Cells(statR + 2, 3).Value = Format(pctN, "0.00%")
    synthWS.Cells(statR + 4, 1).Value = "Total cible (plage)": synthWS.Cells(statR + 4, 2).Value = totalTgt
    ' Ajuster la mise en forme
    synthWS.Columns.AutoFit
    synthWS.Rows.AutoFit
    ' Bordures autour des données
    With synthWS.Range(synthWS.Cells(1, 1), synthWS.Cells(statR + 4, lastColSrc)).Borders
        .LineStyle = xlContinuous
    End With
    ' Fermer source
    srcWB.Close False
    
    MsgBox "Vérification et synthèse stylées terminées !", vbInformation
End Sub

' Créer un bouton sur la feuille Programme
Public Sub AjouterBoutonVerifier()
    Dim cfgWS As Worksheet, btn As Button
    Const configSheetName As String = "programme"
    Set cfgWS = GetSheetByNameInsensitive(ThisWorkbook, configSheetName)
    If cfgWS Is Nothing Then MsgBox "Feuille '" & configSheetName & "' introuvable.", vbCritical: Exit Sub
    For Each btn In cfgWS.Buttons: If btn.Caption = "Exécuter Vérification" Then btn.Delete: Next btn
    With cfgWS
        Set btn = .Buttons.Add(.Range("D3").Left, .Range("D3").Top, 150, 30)
        btn.OnAction = "VerifierChamps"
        btn.Caption = "Exécuter Vérification"
        btn.Name = "btnVerifier"
    End With
End Sub

' Retrouve une feuille insensible à la casse
Private Function GetSheetByNameInsensitive(wb As Workbook, sheetName As String) As Worksheet
    Dim ws As Worksheet
    For Each ws In wb.Sheets
        If StrComp(ws.Name, sheetName, vbTextCompare) = 0 Then Set GetSheetByNameInsensitive = ws: Exit Function
    Next ws
End Function

' Conversion lettre de colonne → numéro
Private Function ColumnLetterToNumber(colLetter As String) As Long
    Dim i As Long, result As Long
    colLetter = UCase(Trim(colLetter))
    For i = 1 To Len(colLetter)
        result = result * 26 + (Asc(Mid(colLetter, i, 1)) - Asc("A") + 1)
    Next i
    ColumnLetterToNumber = result
End Function
