Option Explicit

' UDF de recherche avancée sans chemin, utilisant directement une plage Excel
Public Function RechercheAvancee(searchValue As Variant, sourceColumn As Range, Optional threshold As Double = 0.8) As String
    Dim cell As Range
    Dim searchVal As String, cellVal As String
    
    ' Normalisation (trim + casse insensible)
    searchVal = LCase(Application.Trim(CStr(searchValue)))
    
    ' Parcours de la plage source
    For Each cell In sourceColumn.Cells
        If Not IsError(cell.Value) Then
            cellVal = LCase(Application.Trim(CStr(cell.Value)))
            If Len(cellVal) > 0 Then
                ' Test de similarité
                If StringSimilarity(searchVal, cellVal) >= threshold Then
                    RechercheAvancee = cell.Value
                    Exit Function
                End If
            End If
        End If
    Next cell
    
    ' Si rien trouvé
    RechercheAvancee = "Non trouvée"
End Function

' Calcul de la distance de Levenshtein
Private Function Levenshtein(s As String, t As String) As Long
    Dim d() As Long
    Dim n As Long, m As Long, i As Long, j As Long, cost As Long
    Dim min1 As Long, min2 As Long, min3 As Long
    n = Len(s): m = Len(t)
    If n = 0 Then Levenshtein = m: Exit Function
    If m = 0 Then Levenshtein = n: Exit Function
    ReDim d(0 To n, 0 To m)
    For i = 0 To n: d(i, 0) = i: Next i
    For j = 0 To m: d(0, j) = j: Next j
    For i = 1 To n
        For j = 1 To m
            If Mid(s, i, 1) = Mid(t, j, 1) Then cost = 0 Else cost = 1
            min1 = d(i - 1, j) + 1
            min2 = d(i, j - 1) + 1
            min3 = d(i - 1, j - 1) + cost
            d(i, j) = WorksheetFunction.Min(min1, min2, min3)
        Next j
    Next i
    Levenshtein = d(n, m)
End Function

' Calcul du taux de similarité (0 à 1)
Private Function StringSimilarity(s As String, t As String) As Double
    Dim maxLen As Long, dist As Long
    maxLen = Application.Max(Len(s), Len(t))
    If maxLen = 0 Then
        StringSimilarity = 1
    Else
        dist = Levenshtein(s, t)
        StringSimilarity = 1 - dist / maxLen
    End If
End Function
