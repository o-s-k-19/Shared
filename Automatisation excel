Option Explicit

' Code optimisé pour recherche avancée en bulk sans blocage Excel

Public Sub RemplirRechercheAvanceeOptim(sourceRange As Range, searchRange As Range, resultRange As Range, Optional threshold As Double = 0.8)
    Dim srcArr As Variant, normArr As Variant
    Dim searchArr As Variant, resultArr As Variant
    Dim nSource As Long, nSearch As Long
    Dim i As Long, j As Long
    Dim searchVal As String, bestMatch As String
    Dim bestSim As Double, sim As Double

    ' Désactiver l'affichage et les recalculs
    With Application
        .ScreenUpdating = False
        .EnableEvents = False
        .Calculation = xlCalculationManual
    End With

    ' Charger source en mémoire
    srcArr = sourceRange.Value2
    nSource = UBound(srcArr, 1)
    ReDim normArr(1 To nSource, 1 To 1)
    For i = 1 To nSource
        normArr(i, 1) = LCase(Trim(CStr(srcArr(i, 1))))
    Next i

    ' Charger les valeurs à rechercher
    searchArr = searchRange.Value2
    nSearch = UBound(searchArr, 1)
    ReDim resultArr(1 To nSearch, 1 To 1)

    ' Parcours en mémoire
    For i = 1 To nSearch
        searchVal = LCase(Trim(CStr(searchArr(i, 1))))
        bestSim = 0
        bestMatch = "Non trouvée"
        If Len(searchVal) > 0 Then
            For j = 1 To nSource
                sim = StringSimilarity(searchVal, normArr(j, 1))
                If sim > bestSim Then
                    bestSim = sim
                    bestMatch = srcArr(j, 1)
                    If bestSim >= threshold Then Exit For
                End If
            Next j
        End If
        resultArr(i, 1) = bestMatch
    Next i

    ' Écrire le résultat d'un coup
    resultRange.Value = resultArr

    ' Restaurer paramètres Excel
    With Application
        .Calculation = xlCalculationAutomatic
        .EnableEvents = True
        .ScreenUpdating = True
    End With
End Sub

' Distance de Levenshtein
Private Function Levenshtein(s As String, t As String) As Long
    Dim d() As Long
    Dim n As Long, m As Long, i As Long, j As Long, cost As Long
    Dim min1 As Long, min2 As Long, min3 As Long
    n = Len(s): m = Len(t)
    If n = 0 Then Levenshtein = m: Exit Function
    If m = 0 Then Levenshtein = n: Exit Function
    ReDim d(0 To n, 0 To m)
    For i = 0 To n: d(i, 0) = i: Next i
    For j = 0 To m: d(0, j) = j: Next j
    For i = 1 To n
        For j = 1 To m
            If Mid(s, i, 1) = Mid(t, j, 1) Then cost = 0 Else cost = 1
            min1 = d(i - 1, j) + 1
            min2 = d(i, j - 1) + 1
            min3 = d(i - 1, j - 1) + cost
            d(i, j) = WorksheetFunction.Min(min1, min2, min3)
        Next j
    Next i
    Levenshtein = d(n, m)
End Function

' Taux de similarité (0 à 1)
Private Function StringSimilarity(s As String, t As String) As Double
    Dim maxLen As Long, dist As Long
    maxLen = Application.Max(Len(s), Len(t))
    If maxLen = 0 Then
        StringSimilarity = 1
    Else
        dist = Levenshtein(s, t)
        StringSimilarity = 1 - dist / maxLen
    End If
End Function
