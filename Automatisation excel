import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.WorkbookFactory;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class ExcelComparator {
    // Configuration générale
    private static final String BASE_FILE      = "C:\\chemin\\vers\\fichier_base.xlsx";
    private static final String TARGET_FOLDER  = "C:\\chemin\\vers\\dossier_cibles\\";
    private static final String SHEET_NAME     = "NomDeLaFeuille"; // feuille cible du fichier de base
    private static final String KEY_COLUMN     = "ID";
    private static final List<String> CHECK_COLUMNS = Arrays.asList("ColA", "ColB");
    private static final String RESULT_COLUMN  = "Statut";
    private static final int BASE_HEADER_ROW  = 5;  // ligne d'entête (1-based) pour le fichier de base

    // Configuration spécifique à chaque fichier cible
    private static class TargetConfig {
        String path;
        String sheetName;
        int headerRow;
        TargetConfig(String path, String sheetName, int headerRow) {
            this.path = path;
            this.sheetName = sheetName;
            this.headerRow = headerRow;
        }
    }

    // Déclarez ici la configuration de chaque fichier cible
    private static final List<TargetConfig> TARGET_CONFIGS = Arrays.asList(
        new TargetConfig("C:\\chemin\\vers\\dossier_cibles\\fichier1.xlsx", "Feuille1", 4),
        new TargetConfig("C:\\chemin\\vers\\dossier_cibles\\fichier2.xlsx", "FeuilleA", 6)
        // ajoutez autant de fichiers que nécessaire
    );

    public static void main(String[] args) {
        try (Workbook baseWorkbook = WorkbookFactory.create(new File(BASE_FILE))) {
            DataFormatter formatter = new DataFormatter();
            FormulaEvaluator evaluator = baseWorkbook.getCreationHelper().createFormulaEvaluator();

            // Styles OK / KO
            CellStyle okStyle = baseWorkbook.createCellStyle();
            okStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());
            okStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            CellStyle koStyle = baseWorkbook.createCellStyle();
            koStyle.setFillForegroundColor(IndexedColors.RED.getIndex());
            koStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            // Chargement de la feuille unique du fichier de base
            Sheet baseSheet = baseWorkbook.getSheet(SHEET_NAME);
            if (baseSheet == null) {
                System.err.println("Feuille '" + SHEET_NAME + "' introuvable dans le fichier de base.");
                return;
            }

            // Map entêtes → index (0-based)
            Map<String, Integer> baseHeaderMap = new HashMap<>();
            Row baseHeader = baseSheet.getRow(BASE_HEADER_ROW - 1);
            if (baseHeader == null) {
                System.err.println("Aucune en-tête trouvée à la ligne " + BASE_HEADER_ROW);
                return;
            }
            for (Cell cell : baseHeader) {
                String val = formatter.formatCellValue(cell, evaluator);
                baseHeaderMap.put(val, cell.getColumnIndex());
            }

            // Vérifications de base
            if (!baseHeaderMap.containsKey(KEY_COLUMN)) {
                System.err.println("Colonne clé '" + KEY_COLUMN + "' introuvable.");
                return;
            }
            if (!baseHeaderMap.containsKey(RESULT_COLUMN)) {
                int newIdx = baseHeader.getLastCellNum();
                baseHeader.createCell(newIdx).setCellValue(RESULT_COLUMN);
                baseHeaderMap.put(RESULT_COLUMN, newIdx);
            }

            int keyColIdx    = baseHeaderMap.get(KEY_COLUMN);
            int resultColIdx = baseHeaderMap.get(RESULT_COLUMN);
            int lastRow      = baseSheet.getLastRowNum();

            // Parcours des lignes de données
            for (int ri = BASE_HEADER_ROW; ri <= lastRow; ri++) {
                Row row = baseSheet.getRow(ri);
                if (row == null) continue;
                String keyVal = formatter.formatCellValue(row.getCell(keyColIdx), evaluator);

                // Pour chaque colonne à vérifier, on liste les fichiers où la valeur est présente
                Map<String, List<String>> foundInFiles = new LinkedHashMap<>();
                for (String col : CHECK_COLUMNS) {
                    foundInFiles.put(col, new ArrayList<>());
                }

                // Boucle sur chaque cible
                for (TargetConfig cfg : TARGET_CONFIGS) {
                    try (Workbook targetWb = WorkbookFactory.create(new File(cfg.path))) {
                        Sheet tgtSheet = targetWb.getSheet(cfg.sheetName);
                        if (tgtSheet == null) continue;

                        // Map en-têtes cible
                        Map<String, Integer> tgtHeaderMap = new HashMap<>();
                        Row tgtHeader = tgtSheet.getRow(cfg.headerRow - 1);
                        for (Cell c : tgtHeader) {
                            String v = formatter.formatCellValue(c, evaluator);
                            tgtHeaderMap.put(v, c.getColumnIndex());
                        }

                        // Vérifier chaque colonne
                        for (String col : CHECK_COLUMNS) {
                            // si colonne absente → on ne teste pas
                            if (!baseHeaderMap.containsKey(col) || !tgtHeaderMap.containsKey(col)) continue;
                            int tgtColIdx = tgtHeaderMap.get(col);
                            String baseVal = formatter.formatCellValue(row.getCell(baseHeaderMap.get(col)), evaluator);

                            // recherche dans toute la colonne
                            for (int r2 = cfg.headerRow; r2 <= tgtSheet.getLastRowNum(); r2++) {
                                Row rrow = tgtSheet.getRow(r2);
                                if (rrow == null) continue;
                                Cell tc = rrow.getCell(tgtColIdx);
                                if (tc != null && baseVal.equals(formatter.formatCellValue(tc, evaluator))) {
                                    foundInFiles.get(col).add(new File(cfg.path).getName());
                                    break;
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.err.println("Erreur sur " + cfg.path + ": " + e.getMessage());
                    }
                }

                // Préparation du texte résultat
                String resultText = foundInFiles.entrySet().stream()
                    .map(e -> e.getKey() + ": " + (e.getValue().isEmpty() ? "(absent)" : String.join(",", e.getValue())))
                    .collect(Collectors.joining(" | "));

                // Écriture et style
                Cell resCell = row.getCell(resultColIdx);
                if (resCell == null) resCell = row.createCell(resultColIdx);
                resCell.setCellValue(resultText);
                // on colore en vert si toutes les colonnes ont été trouvées au moins une fois, sinon en rouge
                boolean allFound = foundInFiles.values().stream().allMatch(list -> !list.isEmpty());
                resCell.setCellStyle(allFound ? okStyle : koStyle);
            }

            // Sauvegarde
            String out = BASE_FILE.replaceAll("\\.xlsx?$/, "") + "_résultats.xlsx";
            try (FileOutputStream fos = new FileOutputStream(out)) {
                baseWorkbook.write(fos);
            }
            System.out.println("Fichier généré : " + out);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
